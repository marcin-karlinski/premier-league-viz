str_extract(".*?https") %>%
str_remove(" https")
tagList(div(strong(text_img), style = list(fontFamily = "Arial")),
br(),
image
)}
),
# Rating, Genre, Year
genre_time = colDef(name = "   ", minWidth = 140,
cell = function(value){
value_split <- str_split(value, "_") %>%
unlist()
value_star <- value_split[1] %>% as.numeric()
value_year <- value_split[2] %>% as.numeric()
value_genre <- value_split[3]
value_rate <- value_split[4]
div(h3(value_rate,
style = list(fontFamily = "Source Code Pro, Consolas, Monaco, monospace")),
p(value_genre),
p(paste0("Release: ", value_year)),
br(),
p(paste0("Rating: ", value_star)),
star_rating(value_star)
)
}
),
# Runtime, Vote, Gross
rate_vote = colDef(name = "  ", minWidth = 175,
cell = function(value){
value_split <- str_split(value, " ") %>%
unlist() %>%
as.numeric()
value_run <- value_split[1]
value_vote <- value_split[2]
value_gross <- value_split[3]
width_vote <- paste0(value_vote / max(df$Vote) * 100, "%")
value_vote <- format(value_vote, big.mark = ",")
width_gross <- paste0(value_gross / max(df$Gross, na.rm = T) * 100, "%")
width_run <- paste0(value_run / max(df$Run_time, na.rm = T) * 100, "%")
div(br(),
p(paste0("Runtime: ", value_run, " min")),
bar_chart(value_run, width = width_run, icon = "clock", fill = "#2086F8"),
br(),
p(paste0("Vote: ", value_vote)),
bar_chart(value_vote, width = width_vote, icon = "heart"),
br(),
p(paste0("Gross: $ ", value_gross, " M")),
bar_chart(value_gross, fill = "#298241", width = width_gross, icon = "money-bill-wave")
)
}
),
# Synopsis
Synopsis = colDef(minWidth = 150,
align = "center",
cell = function(value){
div(style= list(color = "#FAFAFA", textAlign = "left", fontSize = "12px"),
value)
}
),
# Actor, Director
act_dir = colDef(name = "", minWidth = 140,
cell = function(value){
value_split <- str_split(value, "_") %>%
unlist()
director <- value_split[1]
actor <- value_split[2]
div(br(),
h4("Director", style = list(fontStyle = "italic", fontFamily = "Arial")),
p(director, style = list(fontSize = "12px")),
h4("Actor", style = list(fontStyle = "italic", fontFamily = "Arial")),
p(actor, style = list(fontSize = "12px"))
)
}
),
# Inline Plot
data = colDef(name = "Interest Over Time",
minWidth = 500, align = "center",
cell = function(value){
if (is.null(value) == F) {
create_plot(value)
}
}
)
)
)
create_plot <- function(x){
hchart(c(rnorm(1000), rnorm(1000, 4, 0.5)), name = "data", color = "#17b8b6") %>%
# hchart(x, "area", hcaes(x = date, y = hits)) %>%
hc_title(text = "") %>%
hc_yAxis(title = list(text = "Hits", style = list(color = "white", fontFamily = "Roboto Slab")),
labels = list(style = list(color = "white", fontFamily = "Roboto Slab"))
) %>%
hc_xAxis(title = list(text = ""),
labels = list(style = list(color = "white", fontFamily = "Roboto Slab"))
)  %>%
hc_colors(colors = "#F56B38") %>%
hc_size(height = 250) %>%
hc_tooltip(pointFormat = "{point.tooltip}")
}
director <- value_split[1]
reactable(top_10,
defaultPageSize = 5,
showPageSizeOptions = T,
pageSizeOptions = c(5, 10, 25, 50, 100),
highlight = T,
theme = reactableTheme(backgroundColor = "#1D2024", color = "white", borderColor = "#666666",
paginationStyle = list(color = "white"),
selectStyle = list(color = "black"),
headerStyle = list(color = "white", fontFamily = "Arial"),
cellStyle = list(color = "#FAFAFA",
fontFamily = "Source Code Pro, Consolas, Monaco, monospace",
fontSize = "14px")
),
columns = list(
# Don't show unnecessary column
Vote = colDef(show = F),
Gross = colDef(show = F),
Genre = colDef(show = F),
Year = colDef(show = F),
Run_time = colDef(show = F),
Age_rate = colDef(show = F),
# Poster Title
Poster_title = colDef(name = "Title",
align = "center",
minWidth = 200,
cell = function(value) {
image_link <- value %>%
str_extract("https:.*jpg")
# convert image link into poster
image <- img(src = image_link, align = "center")
text_img <- value %>%
str_remove("https.*?_tt ") %>%
str_extract(".*?https") %>%
str_remove(" https")
tagList(div(strong(text_img), style = list(fontFamily = "Arial")),
br(),
image
)}
),
# Rating, Genre, Year
genre_time = colDef(name = "   ", minWidth = 140,
cell = function(value){
value_split <- str_split(value, "_") %>%
unlist()
value_star <- value_split[1] %>% as.numeric()
value_year <- value_split[2] %>% as.numeric()
value_genre <- value_split[3]
value_rate <- value_split[4]
div(h3(value_rate,
style = list(fontFamily = "Source Code Pro, Consolas, Monaco, monospace")),
p(value_genre),
p(paste0("Release: ", value_year)),
br(),
p(paste0("Rating: ", value_star)),
star_rating(value_star)
)
}
),
# Runtime, Vote, Gross
rate_vote = colDef(name = "  ", minWidth = 175,
cell = function(value){
value_split <- str_split(value, " ") %>%
unlist() %>%
as.numeric()
value_run <- value_split[1]
value_vote <- value_split[2]
value_gross <- value_split[3]
width_vote <- paste0(value_vote / max(df$Vote) * 100, "%")
value_vote <- format(value_vote, big.mark = ",")
width_gross <- paste0(value_gross / max(df$Gross, na.rm = T) * 100, "%")
width_run <- paste0(value_run / max(df$Run_time, na.rm = T) * 100, "%")
div(br(),
p(paste0("Runtime: ", value_run, " min")),
bar_chart(value_run, width = width_run, icon = "clock", fill = "#2086F8"),
br(),
p(paste0("Vote: ", value_vote)),
bar_chart(value_vote, width = width_vote, icon = "heart"),
br(),
p(paste0("Gross: $ ", value_gross, " M")),
bar_chart(value_gross, fill = "#298241", width = width_gross, icon = "money-bill-wave")
)
}
),
# Synopsis
Synopsis = colDef(minWidth = 150,
align = "center",
cell = function(value){
div(style= list(color = "#FAFAFA", textAlign = "left", fontSize = "12px"),
value)
}
),
# Actor, Director
act_dir = colDef(name = "", minWidth = 140,
cell = function(value){
value_split <- str_split(value, "_") %>%
unlist()
director <- value_split[1]
actor <- value_split[2]
div(br(),
h4("Director", style = list(fontStyle = "italic", fontFamily = "Arial")),
p(director, style = list(fontSize = "12px")),
h4("Actor", style = list(fontStyle = "italic", fontFamily = "Arial")),
p(actor, style = list(fontSize = "12px"))
)
}
),
# Inline Plot
data = colDef(name = "Interest Over Time",
minWidth = 500, align = "center",
cell = function(value){
if (is.null(value) == F) {
create_plot(value)
}
}
)
)
)
reactable(top_10,
defaultPageSize = 5,
showPageSizeOptions = T,
pageSizeOptions = c(5, 10, 25, 50, 100),
highlight = T,
theme = reactableTheme(backgroundColor = "#1D2024", color = "white", borderColor = "#666666",
paginationStyle = list(color = "white"),
selectStyle = list(color = "black"),
headerStyle = list(color = "white", fontFamily = "Arial"),
cellStyle = list(color = "#FAFAFA",
fontFamily = "Source Code Pro, Consolas, Monaco, monospace",
fontSize = "14px")
),
columns = list(
# Don't show unnecessary column
Vote = colDef(show = F),
Gross = colDef(show = F),
Genre = colDef(show = F),
Year = colDef(show = F),
Run_time = colDef(show = F),
Age_rate = colDef(show = F),
# Poster Title
Poster_title = colDef(name = "Title",
align = "center",
minWidth = 200,
cell = function(value) {
image_link <- value %>%
str_extract("https:.*jpg")
# convert image link into poster
image <- img(src = image_link, align = "center")
text_img <- value %>%
str_remove("https.*?_tt ") %>%
str_extract(".*?https") %>%
str_remove(" https")
tagList(div(strong(text_img), style = list(fontFamily = "Arial")),
br(),
image
)}
),
# Rating, Genre, Year
genre_time = colDef(name = "   ", minWidth = 140,
cell = function(value){
value_split <- str_split(value, "_") %>%
unlist()
value_star <- value_split[1] %>% as.numeric()
value_year <- value_split[2] %>% as.numeric()
value_genre <- value_split[3]
value_rate <- value_split[4]
div(h3(value_rate,
style = list(fontFamily = "Source Code Pro, Consolas, Monaco, monospace")),
p(value_genre),
p(paste0("Release: ", value_year)),
br(),
p(paste0("Rating: ", value_star)),
star_rating(value_star)
)
}
),
# Runtime, Vote, Gross
rate_vote = colDef(name = "  ", minWidth = 175,
cell = function(value){
value_split <- str_split(value, " ") %>%
unlist() %>%
as.numeric()
value_run <- value_split[1]
value_vote <- value_split[2]
value_gross <- value_split[3]
width_vote <- paste0(value_vote / max(df$Vote) * 100, "%")
value_vote <- format(value_vote, big.mark = ",")
width_gross <- paste0(value_gross / max(df$Gross, na.rm = T) * 100, "%")
width_run <- paste0(value_run / max(df$Run_time, na.rm = T) * 100, "%")
div(br(),
p(paste0("Runtime: ", value_run, " min")),
bar_chart(value_run, width = width_run, icon = "clock", fill = "#2086F8"),
br(),
p(paste0("Vote: ", value_vote)),
bar_chart(value_vote, width = width_vote, icon = "heart"),
br(),
p(paste0("Gross: $ ", value_gross, " M")),
bar_chart(value_gross, fill = "#298241", width = width_gross, icon = "money-bill-wave")
)
}
),
# Synopsis
Synopsis = colDef(minWidth = 150,
align = "center",
cell = function(value){
div(style= list(color = "#FAFAFA", textAlign = "left", fontSize = "12px"),
value)
}
),
# Actor, Director
act_dir = colDef(name = "", minWidth = 140,
cell = function(value){
value_split <- str_split(value, "_") %>%
unlist()
director <- value_split[1]
actor <- value_split[2]
div(br(),
h4("Director", style = list(fontStyle = "italic", fontFamily = "Arial")),
p(director, style = list(fontSize = "12px")),
h4("Actor", style = list(fontStyle = "italic", fontFamily = "Arial")),
p(actor, style = list(fontSize = "12px"))
)
}
),
# Inline Plot
data = colDef(name = "Interest Over Time",
minWidth = 500, align = "center",
cell = function(value){
if (is.null(value) == F) {
create_plot(value)
}
}
)
)
)
reactable(top_10,
defaultPageSize = 5,
showPageSizeOptions = T,
pageSizeOptions = c(5, 10, 25, 50, 100),
highlight = T,
theme = reactableTheme(backgroundColor = "#1D2024", color = "white", borderColor = "#666666",
paginationStyle = list(color = "white"),
selectStyle = list(color = "black"),
headerStyle = list(color = "white", fontFamily = "Arial"),
cellStyle = list(color = "#FAFAFA",
fontFamily = "Source Code Pro, Consolas, Monaco, monospace",
fontSize = "14px")
),
columns = list(
# Don't show unnecessary column
Vote = colDef(show = F),
Gross = colDef(show = F),
Genre = colDef(show = F),
Year = colDef(show = F),
Run_time = colDef(show = F),
Age_rate = colDef(show = F),
# # Poster Title
# Poster_title = colDef(name = "Title",
#                       align = "center",
#                       minWidth = 200,
#                       cell = function(value) {
#                         image_link <- value %>%
#                           str_extract("https:.*jpg")
#
#                         # convert image link into poster
#                         image <- img(src = image_link, align = "center")
#
#                         text_img <- value %>%
#                           str_remove("https.*?_tt ") %>%
#                           str_extract(".*?https") %>%
#                           str_remove(" https")
#
#                         tagList(div(strong(text_img), style = list(fontFamily = "Arial")),
#                                 br(),
#                                 image
#                         )}
# ),
#
# # Rating, Genre, Year
# genre_time = colDef(name = "   ", minWidth = 140,
#
#                     cell = function(value){
#
#                       value_split <- str_split(value, "_") %>%
#                         unlist()
#
#                       value_star <- value_split[1] %>% as.numeric()
#                       value_year <- value_split[2] %>% as.numeric()
#                       value_genre <- value_split[3]
#                       value_rate <- value_split[4]
#
#                       div(h3(value_rate,
#                              style = list(fontFamily = "Source Code Pro, Consolas, Monaco, monospace")),
#                           p(value_genre),
#                           p(paste0("Release: ", value_year)),
#                           br(),
#                           p(paste0("Rating: ", value_star)),
#                           star_rating(value_star)
#                       )
#                     }
# ),
#
# # Runtime, Vote, Gross
# rate_vote = colDef(name = "  ", minWidth = 175,
#                    cell = function(value){
#
#                      value_split <- str_split(value, " ") %>%
#                        unlist() %>%
#                        as.numeric()
#
#                      value_run <- value_split[1]
#                      value_vote <- value_split[2]
#                      value_gross <- value_split[3]
#
#                      width_vote <- paste0(value_vote / max(df$Vote) * 100, "%")
#                      value_vote <- format(value_vote, big.mark = ",")
#                      width_gross <- paste0(value_gross / max(df$Gross, na.rm = T) * 100, "%")
#                      width_run <- paste0(value_run / max(df$Run_time, na.rm = T) * 100, "%")
#
#                      div(br(),
#                          p(paste0("Runtime: ", value_run, " min")),
#                          bar_chart(value_run, width = width_run, icon = "clock", fill = "#2086F8"),
#                          br(),
#                          p(paste0("Vote: ", value_vote)),
#                          bar_chart(value_vote, width = width_vote, icon = "heart"),
#                          br(),
#                          p(paste0("Gross: $ ", value_gross, " M")),
#                          bar_chart(value_gross, fill = "#298241", width = width_gross, icon = "money-bill-wave")
#
#                      )
#                    }
# ),
#
# # Synopsis
# Synopsis = colDef(minWidth = 150,
#                   align = "center",
#                   cell = function(value){
#                     div(style= list(color = "#FAFAFA", textAlign = "left", fontSize = "12px"),
#                         value)
#                   }
# ),
#
# # Actor, Director
# act_dir = colDef(name = "", minWidth = 140,
#
#                  cell = function(value){
#
#                    value_split <- str_split(value, "_") %>%
#                      unlist()
#
#                    director <- value_split[1]
#                    actor <- value_split[2]
#
#                    div(br(),
#                        h4("Director", style = list(fontStyle = "italic", fontFamily = "Arial")),
#                        p(director, style = list(fontSize = "12px")),
#                        h4("Actor", style = list(fontStyle = "italic", fontFamily = "Arial")),
#                        p(actor, style = list(fontSize = "12px"))
#                    )
#                  }
# ),
# Inline Plot
data = colDef(name = "Interest Over Time",
minWidth = 500, align = "center",
cell = function(value){
if (is.null(value) == F) {
create_plot(value)
}
}
)
)
)
shiny::runApp()
runApp()
runApp()
premier_league_table
stats_shooting <- readRDS("./data/stats_shooting.rds")
stats <- readRDS("./data/stats.rds")
premier_league_table <- readRDS("./data/premier_league_table.rds")
epl_matchday_1to38_table <- readRDS("epl_matchday_1to38_table.rds")
epl_matchday_1to38_table
premier_league_table
runApp()
runApp()
runApp()
epl_matchday_1to38_table[order(p, rk), ]
epl_matchday_1to38_table
epl_matchday_1to38_table[order(p, rk), ]
epl_matchday_1to38_table[order(epl_matchday_1to38_table$p, epl_matchday_1to38_table$rk), ]
epl_matchday_1to38_table[order(-epl_matchday_1to38_table$p, epl_matchday_1to38_table$rk), ]
epl_matchday_1to38_table <- tm_matchday_table(country_name="England", start_year="2022", matchday=c(1:38)) %>%
distinct(league, matchday, rk, squad, p, pts)
saveRDS(epl_matchday_1to38_table, "epl_matchday_1to38_table.rds")
runApp()
epl_matchday_1to38_table[order(-epl_matchday_1to38_table$p, epl_matchday_1to38_table$rk), ]
runApp()
epl_matchday_1to38_table <- tm_matchday_table(country_name="England", start_year="2022", matchday=c(1:38))
epl_matchday_1to38_table
pl_2022 <- fb_match_results(country = "ENG", gender = "M", season_end_year = 2023, tier = "1st")
View(pl_2022)
saveRDS(pl_2022, "eng_matchweek_detailed.rds")
View(pl_2022)
epl_matchday_1to38_table
runApp()
runApp()
pl_2022 <- fb_match_results(country = "ENG", gender = "M", season_end_year = 2023, tier = "1st")
pl_2022$Wk <- as.numeric(pl_2022$Wk)
saveRDS(pl_2022, "eng_matchweek_detailed.rds")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
